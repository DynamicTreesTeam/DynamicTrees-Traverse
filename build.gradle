buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

repositories {
    maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
    maven {
        url "https://maven.tehnut.info"
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url "https://harleyoconnor.com/maven"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'idea'

version = "${mcVersion}-${modVersion}"
group = packageGroup
archivesBaseName = modName

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: 'snapshot', version: "20210309-$mcVersion"

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                dttraverse {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                dttraverse {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            args '--mod', 'dttraverse', '--all', '--output', file('src/generated/resources/')

            mods {
                dttraverse {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcVersion}-${forgeVersion}"

    // Compile Hwyla API, but don't include in runtime.
    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwylaVersion}:api")
    // At runtime, use the full Hwyla mod.
    runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwylaVersion}")

    // Compile JEI API, but don't include in runtime.
    compileOnly fg.deobf("mezz.jei:jei-${mcVersion}:${jeiVersion}:api")
    // At runtime, use the full JEI mod.
    runtimeOnly fg.deobf("mezz.jei:jei-${mcVersion}:${jeiVersion}")

    // Compile Dynamic Trees, of course.
    implementation fg.deobf(group: 'com.ferreusveritas.dynamictrees', name: "DynamicTrees-${mcVersion}", version: dynamicTreesVersion)
    // Also compile Dynamic Trees Plus for cacti.
    runtimeOnly fg.deobf("com.ferreusveritas.dynamictreesplus:DynamicTreesPlus-${mcVersion}:${dynamicTreesPlusVersion}")

    // Compile Traverse
    implementation fg.deobf(group: 'curse.maven', name: 'Traverse-267769', version: '3157857')
}

jar {
    manifest {
        attributes([
                "Specification-Title": project.name,
                "Specification-Vendor": "Harley O'Connor",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${mcVersion}-${modVersion}",
                "Implementation-Vendor" : "Harley O'Connor",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allJava
}

jar.finalizedBy('reobfJar')

java {
    withSourcesJar()
}

curseforge {
    if (project.hasProperty("curseApiKey") && project.hasProperty("curseFileType")) {
        apiKey = property("curseApiKey")

        project {
            id = '407056'

            addGameVersion '1.16.4'
            addGameVersion mcVersion

            changelog = file('build/changelog.md')
            changelogType = 'markdown'
            releaseType = property("curseFileType")

            addArtifact sourcesJar

            mainArtifact(jar) {
                relations {
                    requiredDependency 'dynamictrees'
                    optionalDependency 'dynamictreesplus'
                    requiredDependency 'traverse-reforged'
                }
            }
        }
    } else {
        project.logger.log(LogLevel.WARN, "API Key and file type for CurseForge not detected; uploading will be disabled.")
    }
}

idea {
    module {
        downloadSources = true
    }
}